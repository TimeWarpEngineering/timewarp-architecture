ai-context:
  container-app:
    name: Web
  contracts:
    code gen rules:
      - Do NOT generate using statements
      - namespace format: <container-app.name>.Contracts.Features.Entity 
        - IMPORTANT: DO NOT GO DEEPER THAN ENTITY on the namespace!
      - Feature-based folder structure, grouped by entity
      - Commands and Queries separated in their respective folders
      - Nested classes for organizing commands, queries,responses, dtos and validators
      - Use of partial files for nested classes (optional)
      - IRequest and OneOf for handling request, ProblemDetails, and exception response types
    structure:
      - Features
        - Entity
          - Commands
            - Command1 # namespace Web.Contracts.Features.Entity;
              - Command1.Request
              - Command1.SuccessResponse
              - Command1.<X>Dto
              - Command1.Validator
          - Queries
            - Query1
              - Query1.Query
              - Query1.SuccessResponse
              - Query1.<X>Dto
              - Query1.Validator
    libraries:
      - OneOf: Handling multiple response types
      - FluentValidation: Request validation
      - MediatR: Handling IRequest
