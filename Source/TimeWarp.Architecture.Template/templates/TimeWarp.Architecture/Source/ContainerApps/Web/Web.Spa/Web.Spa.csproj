<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

  <PropertyGroup>
    <Description>TimeWarp Architecture Demo Application</Description>
    <DefineConstants>ReduxDevToolsEnabled;grpc;api;web;counter</DefineConstants>
    <Nullable>enable</Nullable>
    <!--<ServiceWorkerAssetsManifest>service-worker-assets.js</ServiceWorkerAssetsManifest>-->
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <!-- Uncomment the following line if you want to Mock B2C.
     Note you will need to run all Mock Data if you do
     because the token won't work on the real API -->
<!--    <DefineConstants>$(DefineConstants);MOCK_AUTHENTICATION</DefineConstants>-->
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Ardalis.GuardClauses" />
    <PackageReference Include="Blazor-State" />
    <PackageReference Include="BlazorComponentUtilities"/>
<!--    <PackageReference Include="Blazor-State"/>-->
    <PackageReference Include="Grpc.Net.Client"/>
    <PackageReference Include="Grpc.Net.Client.Web"/>
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly"/>
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Authentication"/>
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" PrivateAssets="all"/>
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client"/>
    <PackageReference Include="Microsoft.Authentication.WebAssembly.Msal" />
    <PackageReference Include="Microsoft.Extensions.Http"/>
    <PackageReference Include="Microsoft.Extensions.Logging.Configuration"/>
    <PackageReference Include="Microsoft.FluentUI.AspNetCore.Components"/>
    <PackageReference Include="Microsoft.FluentUI.AspNetCore.Components.Emoji"/>
    <PackageReference Include="Microsoft.FluentUI.AspNetCore.Components.Icons"/>
    <PackageReference Include="Microsoft.Tye.Extensions.Configuration"/>
    <PackageReference Include="Morris.Blazor.ControlFlow"/>
    <PackageReference Include="Morris.Moxy" PrivateAssets="all" GeneratePathProperty="true"/>
    <PackageReference Include="Morris.Blazor.FluentValidation"/>
    <PackageReference Include="protobuf-net.Grpc"/>
    <PackageReference Include="System.Net.Http.Json" PrivateAssets="all"/>
    <PackageReference Include="timewarp-heroicons"/>
<!--    <PackageReference Include="Timewarp.OptionsValidation"/>-->
    <PackageReference Include="timewarp-simple-icons"/>
    <PackageReference Include="TimeWarp.State.Plus"/>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="D:\git\github\TimeWarpEngineering\timewarp-options-validation\source\TimeWarp.OptionsValidation\TimeWarp.OptionsValidation.csproj" />
    <!--#if(api)-->
    <ProjectReference Include="..\..\Api\Api.Contracts\Api.Contracts.csproj"/>
    <!--#endif-->
    <!--#if(grpc)-->
    <ProjectReference Include="..\..\Grpc\Grpc.Contracts\Grpc.Contracts.csproj"/>
    <!--#endif-->
    <ProjectReference Include="..\Web.Contracts\Web.Contracts.csproj"/>
    <ProjectReference Include="D:\git\github\TimeWarpEngineering\blazor-state\Source\BlazorState\BlazorState.csproj" />
    <InternalsVisibleTo Include="Web.Spa.Integration.Tests"/>
    <InternalsVisibleTo Include="Web.Server.Integration.Tests"/>
  </ItemGroup>

  <ItemGroup>
    <!--<ServiceWorker Include="wwwroot\service-worker.js" PublishedContent="wwwroot\service-worker.published.js" />-->
    <Folder Include="Components\Editors\"/>
    <Folder Include="Features\Admin\" />
    <Folder Include="Features\CurrentUser\" />
    <Folder Include="Features\Modal\Actions\"/>
    <Folder Include="Features\Notification\Actions\RemoveNotification\"/>
    <Folder Include="Features\Notification\Components\"/>
    <Folder Include="Features\ToDo\Actions"/>
    <Folder Include="Generated\net8.0\Morris.Moxy\Morris.Moxy.RoslynIncrementalGenerator\"/>
    <Folder Include="wwwroot\css\"/>
    <Folder Include="wwwroot\js\"/>
  </ItemGroup>

  <!--
      1. Install npm packages
      "Inputs" and "Outputs" are used for incremental builds. If all output items are up-to-date, MSBuild skips the target.
      The first time the task is executed. Then, it only runs when you change the package.json file.
      Documentation: https://docs.microsoft.com/en-us/visualstudio/msbuild/incremental-builds?WT.mc_id=DT-MVP-5003978
   -->
  <Target Name="NpmInstall" Inputs="..\Web.TypeScript\package.json" Outputs="..\Web.TypeScript\node_modules\.install-stamp">
    <Exec Command="npm install" WorkingDirectory="..\Web.TypeScript\"/>

    <!-- Write the stamp file, so incremental builds work -->
    <Touch Files="..\Web.TypeScript\node_modules\.install-stamp" AlwaysCreate="true"/>
  </Target>

  <!--
      2. Run NpmRunBuild before building the .NET project.
      MSBuild runs NpmInstall before this task because of the DependsOnTargets attribute.
   -->

  <ItemGroup>
    <TypeScriptInputs Include="..\Web.TypeScript\source\*.*"/>
    <AdditionalFiles Include="Features\Base\StateAccessMixin.mixin"/>
    <AdditionalFiles Include="Mixins\Page.mixin"/>
  </ItemGroup>

  <ItemGroup>
    <_ContentIncludedByDefault Remove="Pages\Authentication\ProfilePage.razor" />
    <_ContentIncludedByDefault Remove="Pages\Authentication\SettingsPage.razor" />
    <_ContentIncludedByDefault Remove="Pages\Authentication\_Imports.razor" />
  </ItemGroup>

  <Target Name="NpmRunBuild" DependsOnTargets="NpmInstall" BeforeTargets="BeforeBuild" Inputs="@(TypeScriptInputs)" Outputs="@(TypeScriptOutputs)">
    <!--    <Exec Command="npm run lint" WorkingDirectory="..\Web.TypeScript\"/>-->
    <Exec Command="npm run prettier" WorkingDirectory="..\Web.TypeScript\"/>
    <Exec Command="npm run build" WorkingDirectory="..\Web.TypeScript\"/>
  </Target>

  <Target Name="CopyLibModule" DependsOnTargets="NpmRunBuild" BeforeTargets="BeforeBuild">
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="wwwroot\js" SkipUnchangedFiles="true"/>
  </Target>

  <!-- Target to copy scoped CSS to a more accessible location -->
  <Target Name="CopyScopedCss" AfterTargets="Build">
    <Copy SourceFiles="$(ProjectDir)obj\$(ConfigurationName)\$(TargetFramework)\scopedcss\bundle\$(ProjectName).styles.css"
          DestinationFolder="$(ProjectDir)obj\css\"
          SkipUnchangedFiles="true" />
  </Target>

  <Target
    Name="NpmRunTailWind"
    DependsOnTargets="Build;NpmRunBuild;CopyScopedCss"
    AfterTargets="Build"
    Inputs="..\Web.TypeScript\tailwind.config.js;..\Web.TypeScript\css\input.css;.\;..\Web.Spa\obj\css\Web.Spa.styles.css"
    Outputs="wwwroot\css\site.css">
    <Exec Command="npm run tailwind" WorkingDirectory="..\Web.TypeScript\"/>
  </Target>

</Project>
