<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

  <PropertyGroup>
    <Description>Blazor Spa</Description>
    <DefineConstants>ReduxDevToolsEnabled;grpc;api;web;counter</DefineConstants>
    <Nullable>disable</Nullable>
    <!--<ServiceWorkerAssetsManifest>service-worker-assets.js</ServiceWorkerAssetsManifest>-->
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BlazorComponentUtilities" />
    <PackageReference Include="Blazor-State" />
    <PackageReference Include="Grpc.Net.Client" />
    <PackageReference Include="Dawn.Guard" />
    <PackageReference Include="Grpc.Net.Client.Web" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" PrivateAssets="all" />
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" />
    <PackageReference Include="Microsoft.Extensions.Logging.Configuration" />
    <PackageReference Include="Microsoft.Tye.Extensions.Configuration" />
    <PackageReference Include="Morris.Blazor.ControlFlow" />
    <PackageReference Include="Morris.Moxy" PrivateAssets="all" GeneratePathProperty="true" />
    <PackageReference Include="Morris.Blazor.FluentValidation" />
    <PackageReference Include="protobuf-net.Grpc" />
    <PackageReference Include="System.Net.Http.Json" PrivateAssets="all" />
    <PackageReference Include="timewarp-heroicons" />
    <PackageReference Include="Timewarp.OptionsValidation" />
    <PackageReference Include="timewarp-simple-icons" />
    <PackageReference Include="Toolbelt.Blazor.SplitContainer" />
  </ItemGroup>

  <ItemGroup>
    <!--#if(api)-->
    <ProjectReference Include="..\..\Api\Api.Contracts\Api.Contracts.csproj" />
    <!--#endif-->
    <!--#if(grpc)-->
    <ProjectReference Include="..\..\Grpc\Grpc.Contracts\Grpc.Contracts.csproj" />
    <!--#endif-->
    <ProjectReference Include="..\Web.Contracts\Web.Contracts.csproj" />
    <InternalsVisibleTo Include="Web.Spa.Integration.Tests" />
    <InternalsVisibleTo Include="Web.Server.Integration.Tests" />
  </ItemGroup>

  <ItemGroup>
    <!--<ServiceWorker Include="wwwroot\service-worker.js" PublishedContent="wwwroot\service-worker.published.js" />-->
    <Folder Include="Components\Editors\" />
    <Folder Include="Features\Modal\Actions\" />
    <Folder Include="Features\Notification\Actions\RemoveNotification\" />
    <Folder Include="Features\Notification\Components\" />
    <Folder Include="Features\ToDo\Actions" />
    <Folder Include="wwwroot\css\" />
    <Folder Include="wwwroot\js\" />
  </ItemGroup>

  <!--
      1. Install npm packages
      "Inputs" and "Outputs" are used for incremental builds. If all output items are up-to-date, MSBuild skips the target.
      The first time the task is executed. Then, it only runs when you change the package.json file.
      Documentation: https://docs.microsoft.com/en-us/visualstudio/msbuild/incremental-builds?WT.mc_id=DT-MVP-5003978
   -->
  <Target Name="NpmInstall" Inputs="..\Web.TypeScript\package.json" Outputs="..\Web.TypeScript\node_modules\.install-stamp">
    <Exec Command="npm install" WorkingDirectory="..\Web.TypeScript\" />

    <!-- Write the stamp file, so incremental builds work -->
    <Touch Files="..\Web.TypeScript\node_modules\.install-stamp" AlwaysCreate="true" />
  </Target>

  <!--
      2. Run NpmRunBuild before building the .NET project.
      MSBuild runs NpmInstall before this task because of the DependsOnTargets attribute.
   -->

  <ItemGroup>
    <TypeScriptInputs Include="..\Web.TypeScript\source\*.*" />
    <TypeScriptOutputs Include="wwwroot\js\BlazorDualMode.js" />
    <AdditionalFiles Include="Features\Base\StateAccessMixin.mixin" />
    <AdditionalFiles Include="Mixins\Page.mixin" />
  </ItemGroup>

  <Target Name="NpmRunBuild" DependsOnTargets="NpmInstall" BeforeTargets="BeforeBuild" Inputs="@(TypeScriptInputs)" Outputs="@(TypeScriptOutputs)">
    <Exec Command="npm run lint" WorkingDirectory="..\Web.TypeScript\" />
    <Exec Command="npm run prettier" WorkingDirectory="..\Web.TypeScript\" />
    <Exec Command="npm run build" WorkingDirectory="..\Web.TypeScript\" />
  </Target>

  <Target Name="CopyLibModule" DependsOnTargets="NpmRunBuild" BeforeTargets="BeforeBuild">
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="wwwroot\js" SkipUnchangedFiles="true" />
  </Target>

  <Target Name="NpmRunTailWind" DependsOnTargets="NpmRunBuild" BeforeTargets="BeforeBuild" Inputs="..\Web.TypeScript\tailwind.config.js;..\Web.TypeScript\css\input.css" Outputs="wwwroot\css\site.css">
    <Exec Command="npm run tailwind" WorkingDirectory="..\Web.TypeScript\" />
  </Target>

</Project>
