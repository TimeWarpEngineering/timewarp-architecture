<CascadingAuthenticationState>
  <Router
    AppAssembly=@typeof(AssemblyMarker).Assembly
    AdditionalAssemblies=@(new[] { typeof(AssemblyMarker).Assembly })>
    <Found Context="routeData">
      <AuthorizeRouteView RouteData=@routeData DefaultLayout=@typeof(MainLayout)>
        <NotAuthorized>
          @if (context.User.Identity?.IsAuthenticated != true)
          {
            <RedirectToLogin/>
          }
          else
          {
            <ForbiddenPage/>
          }
        </NotAuthorized>
      </AuthorizeRouteView>
      <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
      <NotFoundPage/>
    </NotFound>
  </Router>

  <ReduxDevTools />
  <TimeWarpJavaScriptInterop />
  @* TODO <AuthenticationStateListener/> *@
</CascadingAuthenticationState>

@code
{
  [Inject] private JsonRequestHandler JsonRequestHandler { get; set; } = default!;

#if DEBUG
  [Inject] private ReduxDevToolsInterop ReduxDevToolsInterop { get; set; } = default!;
#endif

  protected override async Task OnAfterRenderAsync(bool aFirstRender)
  {
#if DEBUG
    await ReduxDevToolsInterop.InitAsync().ConfigureAwait(false);
#endif
    await JsonRequestHandler.InitAsync().ConfigureAwait(false);
  }
}
