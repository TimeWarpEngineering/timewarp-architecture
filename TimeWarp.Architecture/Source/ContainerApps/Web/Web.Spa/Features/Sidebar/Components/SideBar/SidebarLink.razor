@namespace TimeWarp.Architecture.Features.Sidebars
@inherits ParentComponent
@using CssBuilder = BlazorComponentUtilities.CssBuilder

<li>
  <NavLink href=@Href target=@Target class=@DefaultClass Match=NavLinkMatch.All ActiveClass=@ActiveClass>
    @if (IconCharacter is not null)
    {
      <span class="flex h-6 w-6 shrink-0 items-center justify-center rounded-lg border border-gray-700 bg-gray-800 text-[0.625rem] font-medium text-gray-400 group-hover:text-white">
        @IconCharacter
      </span>
    }
    else
    {
      @SvgIcon
    }
    <span class="truncate">@ChildContent</span>
  </NavLink>
</li>

@code {
  public enum TargetValue
  {
    // ReSharper disable once InconsistentNaming
    _blank,
    // ReSharper disable once InconsistentNaming
    _parent,
    // ReSharper disable once InconsistentNaming
    _self,
    // ReSharper disable once InconsistentNaming
    _top
  }

  [Parameter, EditorRequired] public string Href { get; set; } = default!;
  [Parameter] public char? IconCharacter { get; set; }
  [Parameter] public RenderFragment? SvgIcon { get; set; }
  [Parameter] public TargetValue Target { get; set; } = TargetValue._self;

  private readonly string BaseClasses = "group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold";
  private readonly string DefaultClasses = "text-gray-400 hover:text-white hover:bg-gray-800";
  private readonly string CurrentClasses = "bg-gray-800 text-white";

  private string ActiveClass =>
    new CssBuilder(BaseClasses)
    .AddClass(new CssBuilder(CurrentClasses), true)
    .AddClassFromAttributes(Attributes)
    .Build();

  private string DefaultClass =>
    new CssBuilder(BaseClasses)
    .AddClass(new CssBuilder(DefaultClasses), true)
    .AddClassFromAttributes(Attributes)
    .Build();

  protected override void OnParametersSet()
  {
    base.OnParametersSet();
    Guard.Against.NullOrWhiteSpace(Href);
  }
}
