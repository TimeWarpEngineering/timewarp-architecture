@namespace TimeWarp.Architecture.Features.Profiles
@inherits BaseComponent

@code {
  protected override bool ShouldRender()
  {
    // This component should only render once. Given there is no UX.
    return false;
  }
  protected override async Task OnInitializedAsync()
  {
    AuthenticationStateProvider.AuthenticationStateChanged += HandleAuthenticationStateChanged;
    AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    await HandleUserAuthentication(authenticationState.User);
  }

  private async void HandleAuthenticationStateChanged(Task<AuthenticationState> task)
  {
    AuthenticationState authenticationState = await task;
    await HandleUserAuthentication(authenticationState.User);
  }

  private async Task HandleUserAuthentication(IPrincipal user)
  {
    if (user.Identity?.IsAuthenticated == true)
    {
      await NoSubProfileState.FetchProfileData();
    }
    else
    {
      await NoSubProfileState.ClearProfileData();
      await NoSubAuthorizationState.ClearCurrentUser();
    }
  }

  public override void Dispose()
  {
    // Unsubscribe to avoid memory leaks
    AuthenticationStateProvider.AuthenticationStateChanged -= HandleAuthenticationStateChanged;
  }
}
