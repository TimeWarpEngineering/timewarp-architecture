@moxy
@attribute required string RouteTemplate
@attribute required TimeWarp.Architecture.Features.HttpVerb HttpVerb
@moxy

{{
  $routeParameterTypesAndNames = [];
  $urlSegmentsForRouteAttribute = [];
  $getRouteMethodFormatParts = [];
  $getRouteMethodParameterSources = [];

  $segments = RouteTemplate | regex.split("/");

  for $segment in $segments
   $match = $segment | regex.match `\{(\w+)\s*:?(\w+(\(\d+\))?)\}?`;
    if !$match[0]
      $urlSegmentsForRouteAttribute = $urlSegmentsForRouteAttribute | array.add($segment)
      $getRouteMethodFormatParts = $getRouteMethodFormatParts | array.add($segment)
    else
      $paramName = $match[1]
      $paramType = $match[2]
      $paramTypeLowerCase = $paramType | string.downcase

      case $paramTypeLowerCase
        when "datetime"
          $paramValueFormat = ":yyyy-MM-dd"
        else
          $paramValueFormat = "";
      end
      
      if $paramType == "guid"
        $paramType = "Guid"
      else if $paramType == "datetime"
          $paramType = "DateTime"
      else if $paramType == "alpha" || $paramType == "required" || ($paramType | string.starts_with "minlength") || ($paramType | string.starts_with "maxlength") || ($paramType | string.starts_with "range") || ($paramType | string.starts_with "regex") || ($paramType | string.starts_with "length")
          $paramType = "string"
      else if ($paramType | string.starts_with "min") || ($paramType | string.starts_with "max") || ($paramType | string.starts_with "range")
          $paramType = "int"
      end      
      
      $getRouteMethodFormatParts = $getRouteMethodFormatParts | array.add("{" + $paramName + $paramValueFormat + "}")
      $getRouteMethodParameterSources = $getRouteMethodParameterSources | array.add($paramType + " " + $paramName);

      $routeParameterTypesAndNames = $routeParameterTypesAndNames | array.add({ Name: $paramName, Type: $paramType})
      if $paramTypeLowerCase != "string"
        $urlSegmentsForRouteAttribute = $urlSegmentsForRouteAttribute | array.add("{" + $paramName + ":" + $paramTypeLowerCase + "}")
      else
        $urlSegmentsForRouteAttribute = $urlSegmentsForRouteAttribute | array.add('{' + $paramName + '}')
      end
    end
  end

  capture $parametersSource
    for $currentParameter in $routeParameterTypesAndNames
      "public " + $currentParameter.Type + " " + $currentParameter.Name + " { get; set; }\n"
    end
  end

  $routeAttributeString = $urlSegmentsForRouteAttribute | array.join("/");
  $getRouteSignatureSource = $getRouteMethodParameterSources | array.join(", ")
  $getRouteFormat = $getRouteMethodFormatParts | array.join("/")
-}}

namespace {{ moxy.Class.Namespace }};

partial class {{ moxy.Class.DeclaringType.Name }}
{
  partial class {{ moxy.Class.Name }}
  {
    public const string RouteTemplate = "{{ $routeAttributeString }}";
    public HttpVerb GetHttpVerb() => {{ HttpVerb }};
    {{~ if !($getRouteSignatureSource | string.empty) ~}}
    public string GetRoute({{ $getRouteSignatureSource }}) => FormattableString.Invariant($"{{$getRouteFormat}}");
    {{~ end ~}}
    public string GetRoute() => FormattableString.Invariant($"{{$getRouteFormat}}");
    {{~ if !($parametersSource | string.empty) ~}}
    {{ $parametersSource ~}}
    {{~ end ~}}
  }
}
{{- -}}
